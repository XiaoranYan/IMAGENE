{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "Attaching package: ‘dplyr’\n",
      "\n",
      "The following objects are masked from ‘package:stats’:\n",
      "\n",
      "    filter, lag\n",
      "\n",
      "The following objects are masked from ‘package:base’:\n",
      "\n",
      "    intersect, setdiff, setequal, union\n",
      "\n",
      "\n",
      "Attaching package: ‘igraph’\n",
      "\n",
      "The following object is masked from ‘package:tidyr’:\n",
      "\n",
      "    crossing\n",
      "\n",
      "The following objects are masked from ‘package:dplyr’:\n",
      "\n",
      "    as_data_frame, groups, union\n",
      "\n",
      "The following objects are masked from ‘package:stats’:\n",
      "\n",
      "    decompose, spectrum\n",
      "\n",
      "The following object is masked from ‘package:base’:\n",
      "\n",
      "    union\n",
      "\n",
      "\n",
      "Attaching package: ‘inline’\n",
      "\n",
      "The following object is masked from ‘package:Rcpp’:\n",
      "\n",
      "    registerPlugin\n",
      "\n",
      "Loading required package: mixOmics\n",
      "Loading required package: MASS\n",
      "\n",
      "Attaching package: ‘MASS’\n",
      "\n",
      "The following object is masked from ‘package:dplyr’:\n",
      "\n",
      "    select\n",
      "\n",
      "Loading required package: lattice\n",
      "Loading required package: ggplot2\n",
      "\n",
      "Attaching package: ‘ggplot2’\n",
      "\n",
      "The following object is masked from ‘package:kernlab’:\n",
      "\n",
      "    alpha\n",
      "\n",
      "\n",
      "Loaded mixOmics 6.3.2\n",
      "\n",
      "Thank you for using mixOmics!\n",
      "\n",
      "How to apply our methods: http://www.mixOmics.org for some examples.\n",
      "Questions or comments: email us at mixomics[at]math.univ-toulouse.fr  \n",
      "Any bugs? https://bitbucket.org/klecao/package-mixomics/issues\n",
      "Cite us:  citation('mixOmics')\n",
      "\n",
      "mixKernel will soon be included in the mixOmics package\n",
      "\n",
      "Visit http://www.mixOmics.org for a tutorial to use our method.\n",
      "Any bug reports or comments? Notify us at jerome.mariette@inra.fr or https://bitbucket.org/klecao/package-mixomics/issues\n",
      "\n",
      "Attaching package: ‘Matrix’\n",
      "\n",
      "The following object is masked from ‘package:tidyr’:\n",
      "\n",
      "    expand\n",
      "\n"
     ]
    }
   ],
   "source": [
    "library(dplyr)\n",
    "library(tidyr)\n",
    "library(stringr)\n",
    "library(kernlab)\n",
    "library(igraph)\n",
    "library(Rcpp)\n",
    "library(inline)\n",
    "library(mixKernel)\n",
    "library(Matrix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Time difference of 5.650636 hours"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<strong>elapsed:</strong> 4.69455972222219"
      ],
      "text/latex": [
       "\\textbf{elapsed:} 4.69455972222219"
      ],
      "text/markdown": [
       "**elapsed:** 4.69455972222219"
      ],
      "text/plain": [
       "elapsed \n",
       "4.69456 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cppFunction('double xfun2(const NumericMatrix x, const NumericMatrix y, double sigma) {\n",
    "         int n = x.nrow(), m = y.nrow();\n",
    "         double temp = 0;\n",
    "         for (int i = 0; i < n; i++) {\n",
    "           for (int j = 0; j < m ; j++) {\n",
    "             temp += exp(-pow(pow(x(i,0)-y(j,0),2)+pow(x(i,1)-y(j,1),2),0.5)/8/sigma)\n",
    "                      -exp(-pow(pow(x(i,0)-y(j,1),2)+pow(x(i,1)-y(j,0),2),0.5)/8/sigma);\n",
    "           }\n",
    "         }\n",
    "         return temp/8/sigma/3.14159265;\n",
    "      }')\n",
    "start.time0 <- Sys.time()\n",
    "setwd(\"/gpfs/projects/UITS/IUNI/IMAGENE/Phom_output/thickness_PH_normed_max/PH1_thickTOthin/\")\n",
    "#setwd(\"/gpfs/projects/UITS/IUNI/IMAGENE/Phom_output/gene_PH_normed_max/PH0_test/\")\n",
    "temp = list.files(pattern=\"*.csv\")\n",
    "PH0_thickTOthin = lapply(temp, read.csv)\n",
    "Kmatrix <- diag(length(PH0_thickTOthin))\n",
    "start.time <- Sys.time()\n",
    "call.time = 0\n",
    "for (i in 1:(length(PH0_thickTOthin)-1)){\n",
    "  for (j in (i):length(PH0_thickTOthin)){\n",
    "    x <- data.matrix(PH0_thickTOthin[[i]][,1:2])\n",
    "    y <- data.matrix(PH0_thickTOthin[[j]][,1:2])\n",
    "    x <- x[is.finite(rowSums(x)),]\n",
    "    y <- y[is.finite(rowSums(y)),]\n",
    "    call.time <- call.time + system.time(Kmatrix[i,j] <- xfun2(x, y, 1))[3]\n",
    "  }\n",
    "}\n",
    "end.time <- Sys.time()\n",
    "Kmatrix[lower.tri(Kmatrix)]  <- t(Kmatrix)[lower.tri(Kmatrix)]\n",
    "KmatrixPD = nearPD(Kmatrix)\n",
    "end.time - start.time\n",
    "call.time/3600\n",
    "write.table(data.matrix(KmatrixPD$mat), file='/gpfs/projects/UITS/IUNI/IMAGENE/workingdir/yan30/thickPH1thickKernelPD.tsv', quote=FALSE, sep='\\t', col.names = F, row.names = F)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
